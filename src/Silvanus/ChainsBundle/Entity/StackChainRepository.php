<?php

namespace Silvanus\ChainsBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StackChainRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StackChainRepository extends EntityRepository
{

	public function getLastPriorityByChain($chain_parent_id){

		$builder = $this->createQueryBuilder('c');
			$builder->where('c.chainParent = :chain_parent_id');
			$builder->setParameter(':chain_parent_id',$chain_parent_id);
			$builder->orderBy('c.priority','desc');
			$builder->setMaxResults(1);
		$query 		= $builder->getQuery();				
		
		if(count($query->getResult())===0){
			return 1;
		}else{
			$entity 	= $query->getSingleResult();				
			return $entity->getPriority()+1;
		}
		
	}

	public function checkPriorityExists($chain_parent_id,$priority,$chain_children_id=null){

		$builder = $this->createQueryBuilder('c');
			$builder->where('c.chainParent = :chain_parent_id');
			if($chain_children_id!=null){
				$builder->andWhere('c.chainChildren = :chain_children_id');
			}
			$builder->andWhere('c.priority = :priority');
			$builder->setParameter(':chain_parent_id',$chain_parent_id);
			if($chain_children_id!=null){
				$builder->setParameter(':chain_children_id',$chain_children_id);
			}
			$builder->setParameter(':priority',$priority);
			$builder->setMaxResults(1);
		$query = $builder->getQuery();				
		
		if(count($query->getResult())>0){		
			return true;
		}else{
			return false;
		}
		
	}
	
	/*
	 * Fix the priority for insert/update new rule with priority conflict and force is enable
	 * */
	public function fixPriorityOffset($chain_parent_id,$priority){
	
		$em = $this->getEntityManager();
	
		$builder = $this->createQueryBuilder('c');
			$builder->where('c.chainParent = :chain_parent_id');
			$builder->andWhere('c.priority >= :priority');
			$builder->setParameter(':chain_parent_id',$chain_parent_id);
			$builder->setParameter(':priority',$priority);
			$builder->orderBy('c.priority', 'ASC');
		$query = $builder->getQuery();				
		
		foreach($query->getResult() as $entity){
			
			$entity->setPriority($entity->getPriority()+1);
			$em->persist($entity);
			
		}

		$em->flush();
	}
	
	/*
	 * Fix the priority index
	 * */
	public function fixPriorityIndex($chain_parent_id){
	
		$em = $this->getEntityManager();
	
		$builder = $this->createQueryBuilder('c');
			$builder->where('c.chainParent = :chain_parent_id');
			$builder->setParameter(':chain_parent_id',$chain_parent_id);
			$builder->orderBy('c.priority', 'ASC');
		$query = $builder->getQuery();				
		
		$n=1;
		foreach($query->getResult() as $entity){
			
			$entity->setPriority($n);
			$em->persist($entity);
			$n++;
			
		}

		$em->flush();
	}
	
	
}
